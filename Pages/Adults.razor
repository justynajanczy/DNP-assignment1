@page "/Adults"
@using Assignment1.Models
@using Assignment1.Persistance
@inject IFileAdapter FileAdapter

<h3>Adults</h3>

<p style="font-size:30px">
    @*default text*@
    Filter by name: <input @oninput="@(arg => Filter(arg))" style="width:250px"/>
</p>
@if (toShowAdults == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (!toShowAdults.Any())
    {
        <p>
            <em>No Adults items exist. Please add some.</em>
        </p>
    }
    else
    {
        <table id="adultsTable" class="table table-hover">
            <thead class="thead-light">
            <tr>
                <th>Adult ID</th>
                <th>Name</th>
                <th>Age</th>
                <th>Sex</th>
                <th>Job title</th>
                <th>Salary</th>
                <th>Hair color</th>
                <th>Eye color</th>
                <th>Weight</th>
                <th>Height</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var adult in toShowAdults)
            {
                <tr>
                    <td>@adult.Id</td>
                    <td>@adult.FirstName&ensp;@adult.LastName</td>
                    <td>@adult.Age</td>
                    <td>@adult.Sex</td>
                    <td>@adult.JobTitle.JobTitle</td>
                    <td>@adult.JobTitle.Salary</td>
                    <td>@adult.HairColor</td>
                    <td>@adult.EyeColor</td>
                    <td>@adult.Weight</td>
                    <td>@adult.Height</td>
                </tr>
            }
            </tbody>
        </table>
    }

@code {
    private IList<Adult> adults;
    private IList<Adult> toShowAdults;

    private string? filterByName;
    
    protected override async Task OnInitializedAsync()
    {
        adults = FileAdapter.GetAdults();
        toShowAdults = adults;
    }

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        filterByName = null;
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e){}
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        toShowAdults = adults.Where(a =>
            (filterByName != null && (a.FirstName.ToLower().Contains(filterByName.ToLower()) || a.LastName.ToLower().Contains(filterByName.ToLower())) || filterByName == null)).ToList();

    }
}